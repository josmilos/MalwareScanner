using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ServiceModel;
using Contracts;
using SecurityManager;
using System.Security.Principal;
using System.Security.Cryptography.X509Certificates;
using DataModels;
using System.IO;

namespace Client
{
	public class WCFClient : ChannelFactory<IService>, IService, IDisposable
	{
		IService factory;
		public static Dictionary<string, int> MalwareProcesses = new Dictionary<string, int>();
		public WCFClient(NetTcpBinding binding, EndpointAddress address)
			: base(binding, address)
		{
			/// cltCertCN.SubjectName should be set to the client's username. .NET WindowsIdentity class provides information about Windows user running the given process
			string cltCertCN = FormatterForCert.ParseNameForCert(WindowsIdentity.GetCurrent().Name);

			this.Credentials.ServiceCertificate.Authentication.CertificateValidationMode = System.ServiceModel.Security.X509CertificateValidationMode.Custom;
			this.Credentials.ServiceCertificate.Authentication.CustomCertificateValidator = new ClientCertValidator();
			this.Credentials.ServiceCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

			/// Set appropriate client's certificate on the channel. Use CertManager class to obtain the certificate based on the "cltCertCN"
			this.Credentials.ClientCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, cltCertCN);

			factory = this.CreateChannel();
		}

		public void LogUnauthorizedProcess(string message, byte[] sign)
		{
			try
			{
				factory.LogUnauthorizedProcess(message,sign);
			}
			catch (Exception e)
			{
				Console.WriteLine("[TestCommunication] ERROR = {0}", e.Message);
			}
		}

		public void Dispose()
		{
			if (factory != null)
			{
				factory = null;
			}

			this.Close();
		}

		public void ReadConfiguration()
		{
			Console.WriteLine("MALWARE PROCESSES");
			Console.WriteLine("-----------------------");

			string fileName = @"..\..\MalwareBlacklist.txt";

			using (StreamReader reader = new StreamReader(fileName))
			{
				string line;
				int i = 0;
				while ((line = reader.ReadLine()) != null)
				{
					Console.WriteLine(i + ". " + line);
					i++;
				}
			}
		}

		public void AddProces(string process)
		{
			string fileName = @"..\..\MalwareBlacklist.txt";
			bool check = false;
			using (StreamReader reader = new StreamReader(fileName))
			{
				string line;
				while ((line = reader.ReadLine()) != null)
				{
					if(line == process)
                    {
                        Console.WriteLine("Process is already in configuration!");
						check = true;
						break;
                    }
				}
			}
			if (check == false)
            {
				using (StreamWriter w = File.AppendText(fileName))
				{
					w.WriteLine(process);
				}
			}
		}

		public void ModifyProcess(string processOld, string processNew)
		{
			string filePath = @"..\..\MalwareBlacklist.txt";
			bool check = false;
			using (StreamReader reader = new StreamReader(filePath))
			{
				string line;
				while ((line = reader.ReadLine()) != null)
				{
					if (line == processOld)
					{
						Console.WriteLine("Process is already in configuration! Can't modify!");
						check = true;
						break;
					}
				}
			}
			if (check == false)
			{
				string text = File.ReadAllText(filePath);
				text = text.Replace(processOld, processNew);
				File.WriteAllText(filePath, text);
			}
		}

		public void RemoveProcess(string process)
		{
			string filePath = @"..\..\MalwareBlacklist.txt";
			string strOldText;
			string n = "";
			StreamReader sr = File.OpenText(filePath);
			while ((strOldText = sr.ReadLine()) != null)
			{
				if (!strOldText.Contains(process))
				{
					n += strOldText + Environment.NewLine;
				}
			}
			sr.Close();
			File.WriteAllText(filePath, n);
		}

		public void DeleteConfigurationFile()
		{
			string fileName = @"..\..\MalwareBlacklist.txt";

			try
            {
				File.Delete(fileName);
				if (!File.Exists(fileName))
				{
					Console.WriteLine($"File {fileName} is successfully deleted.");
				}
			}
			catch(IOException e)
            {
                Console.WriteLine("File could not be deleted");
                Console.WriteLine(e.Message);
            }

		}
	}
}
