using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;
using DataModels;
using Contracts;
using System.Diagnostics;
using System.Security.Cryptography.X509Certificates;
using SecurityManager;
using System.Threading;
using System.Security.Principal;

namespace Client
{
    public class Program
    {
        static void Main(string[] args)
        {

            int N = 20000;//VREME POSLE KOJEG PONOVO PROVERAVA ZA PROCESE 20 sekundi
            string address = "net.tcp://localhost:9999/IDS";

            /// Define the expected certificate for signing ("<username>_sign" is the expected subject name).
            /// .NET WindowsIdentity class provides information about Windows user running the given process
            string signCertCN = Formatter.ParseName(WindowsIdentity.GetCurrent().Name) + "_sign";

            /// Define the expected service certificate. It is required to establish cmmunication using certificates.
            string srvCertCN = "";

            NetTcpBinding binding = new NetTcpBinding();
            //binding.Security.Mode = SecurityMode.Transport;
            binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;
            // binding.Security.Transport.ProtectionLevel = System.Net.Security.ProtectionLevel.EncryptAndSign;

            /// Use CertManager class to obtain the certificate based on the "srvCertCN" representing the expected service identity.
            X509Certificate2 srvCert = CertManager.GetCertificateFromStorage(StoreName.TrustedPeople, StoreLocation.LocalMachine, srvCertCN);
            EndpointAddress addr = new EndpointAddress(new Uri(address),
                                      new X509CertificateEndpointIdentity(srvCert));

            WCFClient proxy = new WCFClient(binding, addr);


            

            //while (true) { 

            Process[] processlist = Process.GetProcesses();
            /*
            foreach (Process theprocess in processlist)
            {
                Console.WriteLine("Process: {0} ID: {1}", theprocess.ProcessName, theprocess.Id);
            }
            */

            string message = DateTime.Now + "?" + "imeprocesa" + "nivokriticnosti";

            /// Create a signature based on the "signCertCN"

            X509Certificate2 certificateSign = CertManager.GetCertificateFromStorage(StoreName.My,
                StoreLocation.LocalMachine, signCertCN);

            byte[] signature = DigitalSignature.Create(message, HashAlgorithm.SHA1, certificateSign);

            proxy.LogUnauthorizedProcess(message, signature);

            Thread.Sleep(N);
            //}




            Console.WriteLine("Service started");

            Console.ReadKey();
        }

        static void menu(WCFClient proxy)
        {

            string option = "";
            while (true)
            {
                Console.WriteLine("---------------------------------\n");
                Console.WriteLine("Chose option:\n");
                Console.WriteLine("1)Read configuration\n");
                Console.WriteLine("2)Add process\n");
                Console.WriteLine("3)Remove process\n");
                Console.WriteLine("4)Delete config file\n");
                option = Console.ReadLine();
                switch (option)
                {
                    case "1":
                        proxy.ReadConfiguration();
                        break;
                    case "2":
                        Console.WriteLine("Enter new process name:\n");
                        string newProcess = Console.ReadLine();
                        proxy.AddProces(newProcess);
                        break;
                    case "3":
                        Console.WriteLine("Enter process name:\n");
                        string deleteProcess = Console.ReadLine();
                        proxy.RemoveProcess(deleteProcess);
                        break;
                    case "4":
                        proxy.DeleteConfigurationFile();
                        break;
                    default:
                        break;
                }
            }

            Console.WriteLine("---------------------------------");

        }
        //TO DO logovanje
        static void LogCriticalLevel()
        {
            //TO DO
        }


    }
}
