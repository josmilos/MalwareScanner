using Contracts;
using SecurityManager;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Permissions;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Service
{
    public class Service2 : IMallware
    {
        ClientActionLogger cLog = new ClientActionLogger();

        #region Read
        [PrincipalPermission(SecurityAction.Demand, Role = "Read")]
        public List<string> ReadConfiguration()
        {
            List<string> retList = new List<string>();
            retList.Add("MALWARE PROCESSES");
            retList.Add("-----------------------");

            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);
            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);

            }
            catch (Exception e)
            {
                cLog.LogAction(userName, "Read Configuration", false);
                Console.WriteLine(e.Message);
            }

            try
            {
                string fileName = @"..\..\..\Service\MalwareBlacklist.txt";

                using (StreamReader reader = new StreamReader(fileName))
                {
                    string line;
                    int i = 0;
                    while ((line = reader.ReadLine()) != null)
                    {
                        retList.Add(i + ". " + line);
                        i++;
                    }
                }
                retList.Add("-----------------------");
            } catch (Exception e)
            {
                Console.WriteLine("WARNING, the MalwareBlacklist txt file is deleted!");
            }
            cLog.LogAction(userName, "Read Configuration", true);
            Console.WriteLine("ReadConfiguration executed!");
            return retList;
        }
        #endregion

        #region AddProcess
        [PrincipalPermission(SecurityAction.Demand, Role = "AddProcess")]
        public string AddProcess(string process)
        {

            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                cLog.LogAction(userName, "Add Process", false);
                Console.WriteLine(e.Message);
            }

            string fileName = @"..\..\..\Service\MalwareBlacklist.txt";
            bool check = false;
            StreamReader sr = new StreamReader(fileName);

            try
            {

                string line;
                while ((line = sr.ReadLine()) != null)
                {
                    if (line == process)
                    {
                        Console.WriteLine("Can't Execute AddProcess!");
                        sr.Close();
                        cLog.LogAction(userName, "Add Process", false);
                        return "Can't add! Process is already in configuration!";
                    }
                }
                sr.Close();

                if (check == false)
                {
                    StreamWriter sw = File.AppendText(fileName);
                    sw.WriteLine(process);
                    sw.Close();
                }
                cLog.LogAction(userName, "Add Process", true);

            }
            catch (Exception e)
            {
                Console.WriteLine("WARNING, the MalwareBlacklist txt file is deleted!");
            }

            Console.WriteLine("AddProcess executed!");
            return "Process |" + process + "| successfully added!"; ;
        }
        #endregion

        #region ModifyProcess
        [PrincipalPermission(SecurityAction.Demand, Role = "ModifyProcess")]
        public string ModifyProcess(string processOld, string processNew)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                cLog.LogAction(userName, "Modify Process", false);
                Console.WriteLine(e.Message);
            }
            int i = 0;
            string filePath = @"..\..\..\Service\MalwareBlacklist.txt";

            try
            {

                using (StreamReader reader = new StreamReader(filePath))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        if (line == processNew)
                        {
                            Console.WriteLine("Can't Execute ModifyProcess!");
                            cLog.LogAction(userName, "Modify Process", false);
                            return "Can't add! Process is already in configuration!";
                        }
                        if (line == processOld)
                        {
                            i++;
                        }
                    }
                }
                if (i == 0)
                {
                    cLog.LogAction(userName, "Modify Process", false);
                    Console.WriteLine("Process does not exist in the current configuration!");
                }
                else
                {
                    string text = File.ReadAllText(filePath);
                    text = text.Replace(processOld, processNew);
                    File.WriteAllText(filePath, text);

                    cLog.LogAction(userName, "Modify Process", true);
                    Console.WriteLine("ModifyProcess executed");
                    return "Process |" + processOld + "| successfully modified!";
                }

                cLog.LogAction(userName, "Modify Process", false);

            }
            catch (Exception e)
            {
                Console.WriteLine("WARNING, the MalwareBlacklist txt file is deleted!");
            }

            return "Process does not exist in the current configuration!";

        }
        #endregion

        #region DeleteProcess
        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteProcess")]
        public string RemoveProcess(string process)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                cLog.LogAction(userName, "Remove Process", false);
                Console.WriteLine(e.Message);
            }

            int i = 0;
            string filePath = @"..\..\..\Service\MalwareBlacklist.txt";
            string strOldText;
            string n = "";
            StreamReader sr = File.OpenText(filePath);
            while ((strOldText = sr.ReadLine()) != null)
            {
                if (!strOldText.Contains(process))
                {
                    n += strOldText + Environment.NewLine;
                } else
                {
                    i++;
                }
            }

            sr.Close();
            File.WriteAllText(filePath, n);

            if (i == 0)
            {
                cLog.LogAction(userName, "Remove Process", false);
                Console.WriteLine("Can't Execute DeleteProcess!");
                return "Process |" + process + "| does not exist in Config file!";
            } else
            {
                cLog.LogAction(userName, "Remove Process", true);
                Console.WriteLine("DeleteProcess executed!");
                return "Process |" + process + "| successfully removed!";
            }
        }
        #endregion

        #region DeleteConfig
        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteConfig")]
        public string DeleteConfigurationFile()
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                cLog.LogAction(userName, "Delete Config", false);
                Console.WriteLine(e.Message);
            }


            string fileName = @"..\..\..\Service\MalwareBlacklist.txt";

            try
            {
                if (File.Exists(fileName))
                {
                    File.Delete(fileName);
                    cLog.LogAction(userName, "Delete Config", true);
                    Console.WriteLine("DeleteConfig executed!");
                    return "DeleteConfig executed!";
                } 
                else
                {
                    cLog.LogAction(userName, "Delete Config", false);
                    Console.WriteLine("Can't find MalwareBlacklist.txt to delete!");
                    return "Configuration file |" + "MalwareBlacklist.txt" + "| cannot be found!";
                }
            }
            catch (IOException e)
            {
                cLog.LogAction(userName, "Delete Config", false);
                Console.WriteLine("File could not be deleted");
                Console.WriteLine(e.Message);
                Console.ReadLine();
            }
            cLog.LogAction(userName, "Delete Config", false);
            return "Cannot find Config file!";
        }
        #endregion

        #region GetMalwareProcesses()
        public List<string> GetMalwareProcesses()
        {
            List<string> malwares = new List<string>();

            string fileName = @"..\..\..\Service\MalwareBlacklist.txt";

            try
            {
                using (StreamReader reader = new StreamReader(fileName))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        malwares.Add(line);
                    }
                }
                return malwares;
            }
            catch
            {
                Console.WriteLine("WARNING, the MalwareBlacklist txt file is deleted!");
            }
            return new List<string>();

        }
        #endregion
    }
}
