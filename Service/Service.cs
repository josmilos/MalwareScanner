using Contracts;
using DataModels;
using SecurityManager;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Permissions;
using System.Text;
using System.Threading.Tasks;
// [PrincipalPermission(SecurityAction.Demand, Role = "Delete")]
namespace Service
{
    public class Service : IService, IConfigFileFunctions
    {
        public static RolesConfig rc = new RolesConfig();

        public void LogUnauthorizedProcess(DateTime date, string processName, CriticalityLevel level)
        {
            //TO DO logovanje
            Console.WriteLine("trrrt");
            throw new NotImplementedException();
        }



        //IConfigFileFunctions 

        [PrincipalPermission(SecurityAction.Demand, Role = "Read")]
        public void readConfiguration()
        {
            throw new NotImplementedException();
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "AddProcess")]
        public void addProces(string process)
        {
            RolesConfig.AddProcess(process);
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "ModifyProcess")]
        public void modifyProcess(string processOld, string processNew)
        {
            throw new NotImplementedException();
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteProcess")]
        public void remodveProcess(string process)
        {
            RolesConfig.RemoveProcess(process);
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteConfig")]
        public void deleteConfigurationFile()
        {
            throw new NotImplementedException();
        }



        
    }
}
