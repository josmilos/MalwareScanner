using Contracts;
using DataModels;
using SecurityManager;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Permissions;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
// [PrincipalPermission(SecurityAction.Demand, Role = "Delete")]
namespace Service
{
    public class Service : IService
    {
        public static RolesConfig rc = new RolesConfig();

        public void LogUnauthorizedProcess(DateTime date, string processName, CriticalityLevel level)
        {
            //TO DO logovanje
            Console.WriteLine("trrrt");
            throw new NotImplementedException();
        }



        //IConfigFileFunctions 

        [PrincipalPermission(SecurityAction.Demand, Role = "Read")]
        public void ReadConfiguration()
        {

            Console.WriteLine("ReadConfiguration executed");
            // CustomAuthorizationManager i metoda CheckAccessCore proverava ovaj Read valjda tako da ne treba ovo iznad [ ] ovde
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);
            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            // TO DO:
            throw new NotImplementedException();
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "AddProcess")]
        public void AddProces(string process)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            RolesConfig.AddProcess(process);

        }

        [PrincipalPermission(SecurityAction.Demand, Role = "ModifyProcess")]
        public void ModifyProcess(string processOld, string processNew)
        {
            Console.WriteLine("ModifyProcess executed");
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            // TO DO:
            throw new NotImplementedException();
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteProcess")]
        public void RemoveProcess(string process)
        {
            Console.WriteLine("DeleteProcess executed");
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }


            // TO DO:
            throw new NotImplementedException();
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteConfig")]
        public void DeleteConfigurationFile()
        {
            Console.WriteLine("DeleteConfig executed");
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }


            // TO DO:
            throw new NotImplementedException();
        }



        
    }
}
