using Contracts;
using DataModels;
using SecurityManager;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Security.Permissions;
using System.ServiceModel;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
// [PrincipalPermission(SecurityAction.Demand, Role = "Delete")]
namespace Service
{
    public class Service : IService
    {
        public static RolesConfig rc = new RolesConfig();

        public void LogUnauthorizedProcess(string message, byte[] sign)
        {
            //kad je u pitanju autentifikacija putem Sertifikata
            string clientName = FormatterForCert.ParseNameForCert(ServiceSecurityContext.Current.PrimaryIdentity.Name);

            string clientNameSign = clientName + "_sign";
            X509Certificate2 certificate = CertManager.GetCertificateFromStorage(StoreName.TrustedPeople,
                StoreLocation.LocalMachine, clientNameSign);

            // OVO JE PRIMLJENA PORUKA
            /// Verify signature using SHA1 hash algorithm
            if (DigitalSignature.Verify(message, HashAlgorithm.SHA1, sign, certificate))
            {
                // TO DO
                // DIGITALNI POTPIS JE VALIDAN TREBA DA SE LOGUJE PRIMLJENA PORUKA
                //Console.WriteLine("Sign is valid");
                Console.WriteLine("Malware Scanner: " + message);
                Audit.ProcessLogFromMS(message);
            }
            else
            {
                //TO DO
                // DIGITALNI POTPIS JE NEVALIDAN TREBA DA SE LOGUJE TO
                Console.WriteLine("Sign is invalid");
            }
        }



        //IConfigFileFunctions 

        [PrincipalPermission(SecurityAction.Demand, Role = "Read")]
        public void ReadConfiguration()
        {

            Console.WriteLine("ReadConfiguration executed");
            // CustomAuthorizationManager i metoda CheckAccessCore proverava ovaj Read valjda tako da ne treba ovo iznad [ ] ovde
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);
            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);

            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            Console.WriteLine("MALWARE PROCESSES");
            Console.WriteLine("-----------------------");

            string fileName = "MalwareBlacklist.txt";

            using (StreamReader reader = new StreamReader(fileName))
            {
                string line;
                int i = 0;
                while ((line = reader.ReadLine()) != null)
                {
                    Console.WriteLine(i + ". " + line);
                    i++;
                }
            }

        }

        [PrincipalPermission(SecurityAction.Demand, Role = "AddProcess")]
        public void AddProces(string process)
        {
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            string fileName = @"..\..\MalwareBlacklist.txt";
            bool check = false;
            using (StreamReader reader = new StreamReader(fileName))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    if (line == process)
                    {
                        Console.WriteLine("Process is already in configuration!");
                        check = true;
                        break;
                    }
                }
            }
            if (check == false)
            {
                using (StreamWriter w = File.AppendText(fileName))
                {
                    w.WriteLine(process);
                }
            }

        }

        [PrincipalPermission(SecurityAction.Demand, Role = "ModifyProcess")]
        public void ModifyProcess(string processOld, string processNew)
        {
            Console.WriteLine("ModifyProcess executed");
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

            string filePath = @"..\..\MalwareBlacklist.txt";
            bool check = false;
            using (StreamReader reader = new StreamReader(filePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    if (line == processNew)
                    {
                        Console.WriteLine("Process is already in configuration! Can't modify!");
                        check = true;
                        break;
                    }
                }
            }
            if (check == false)
            {
                string text = File.ReadAllText(filePath);
                text = text.Replace(processOld, processNew);
                File.WriteAllText(filePath, text);
            }

        }

        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteProcess")]
        public void RemoveProcess(string process)
        {
            Console.WriteLine("DeleteProcess executed");
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }


            string filePath = @"..\..\MalwareBlacklist.txt";
            string strOldText;
            string n = "";
            StreamReader sr = File.OpenText(filePath);
            while ((strOldText = sr.ReadLine()) != null)
            {
                if (!strOldText.Contains(process))
                {
                    n += strOldText + Environment.NewLine;
                }
            }
            sr.Close();
            File.WriteAllText(filePath, n);
        }

        [PrincipalPermission(SecurityAction.Demand, Role = "DeleteConfig")]
        public void DeleteConfigurationFile()
        {
            Console.WriteLine("DeleteConfig executed");
            CustomPrincipal principal = Thread.CurrentPrincipal as CustomPrincipal;
            string userName = Formatter.ParseName(principal.Identity.Name);

            try
            {
                Audit.AuthorizationSuccess(userName, OperationContext.Current.IncomingMessageHeaders.Action);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }


            string fileName = @"..\..\MalwareBlacklist.txt";

            try
            {
                File.Delete(fileName);
                if (!File.Exists(fileName))
                {
                    Console.WriteLine($"File {fileName} is successfully deleted.");
                }
            }
            catch (IOException e)
            {
                Console.WriteLine("File could not be deleted");
                Console.WriteLine(e.Message);
            }
        }




    }
}
